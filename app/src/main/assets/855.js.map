{"version":3,"file":"855.js","mappings":";;;;;;;;;;;AAA4C;AACrC,qCAAqC,gEAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA","sources":["webpack://api/./node_modules/capacitor-secure-storage-plugin/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class SecureStoragePluginWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.PREFIX = 'cap_sec_';\n        this.addPrefix = (key) => this.PREFIX + key;\n        this.removePrefix = (key) => key.replace(this.PREFIX, '');\n    }\n    get(options) {\n        const value = localStorage.getItem(this.addPrefix(options.key));\n        return value !== null\n            ? Promise.resolve({\n                value: atob(value),\n            })\n            : Promise.reject('Item with given key does not exist');\n    }\n    set(options) {\n        localStorage.setItem(this.addPrefix(options.key), btoa(options.value));\n        return Promise.resolve({ value: true });\n    }\n    remove(options) {\n        if (localStorage.getItem(this.addPrefix(options.key))) {\n            localStorage.removeItem(this.addPrefix(options.key));\n            return Promise.resolve({ value: true });\n        }\n        else {\n            return Promise.reject('Item with given key does not exist');\n        }\n    }\n    clear() {\n        for (const key in localStorage) {\n            if (key.indexOf(this.PREFIX) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n        return Promise.resolve({ value: true });\n    }\n    keys() {\n        const keys = Object.keys(localStorage)\n            .filter(k => k.indexOf(this.PREFIX) === 0)\n            .map(this.removePrefix);\n        return Promise.resolve({ value: keys });\n    }\n    getPlatform() {\n        return Promise.resolve({ value: 'web' });\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":[],"sourceRoot":""}