{"version":3,"file":"node_modules_capgo_native-audio_dist_esm_web_js.de05f9db2e21e387e52b.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACL4C;AACD;AAC3C,6BAA6B,sDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qDAAqD,wBAAwB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6BAA6B,EAAE,YAAY,EAAE,kBAAkB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,oDAAU;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0B;AAC1B;AACuB;AACvB","sources":["webpack://mytonwallet/./node_modules/@capgo/native-audio/dist/esm/audio-asset.js","webpack://mytonwallet/./node_modules/@capgo/native-audio/dist/esm/web.js"],"sourcesContent":["export class AudioAsset {\n    constructor(audio) {\n        this.audio = audio;\n    }\n}\n//# sourceMappingURL=audio-asset.js.map","import { WebPlugin } from \"@capacitor/core\";\nimport { AudioAsset } from \"./audio-asset\";\nclass NativeAudioWeb extends WebPlugin {\n    constructor() {\n        super();\n    }\n    async resume(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        if (audio.paused) {\n            return audio.play();\n        }\n    }\n    async pause(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        return audio.pause();\n    }\n    async getCurrentTime(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        return { currentTime: audio.currentTime };\n    }\n    async getDuration(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        if (Number.isNaN(audio.duration)) {\n            throw \"no duration available\";\n        }\n        if (!Number.isFinite(audio.duration)) {\n            throw \"duration not available => media resource is streaming\";\n        }\n        return { duration: audio.duration };\n    }\n    async configure(options) {\n        throw `configure is not supported for web: ${JSON.stringify(options)}`;\n    }\n    async preload(options) {\n        var _a;\n        if (NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.has(options.assetId)) {\n            throw \"AssetId already exists. Unload first if like to change!\";\n        }\n        if (!((_a = options.assetPath) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw \"no assetPath provided\";\n        }\n        if (!options.isUrl &&\n            !new RegExp(\"^/?\" + NativeAudioWeb.FILE_LOCATION).test(options.assetPath)) {\n            const slashPrefix = options.assetPath.startsWith(\"/\") ? \"\" : \"/\";\n            options.assetPath = `${NativeAudioWeb.FILE_LOCATION}${slashPrefix}${options.assetPath}`;\n        }\n        const audio = new Audio(options.assetPath);\n        audio.autoplay = false;\n        audio.loop = false;\n        audio.preload = \"auto\";\n        if (options.volume) {\n            audio.volume = options.volume;\n        }\n        NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.set(options.assetId, new AudioAsset(audio));\n    }\n    async play(options) {\n        var _a;\n        const audio = this.getAudioAsset(options.assetId).audio;\n        await this.stop(options);\n        audio.loop = false;\n        audio.currentTime = (_a = options.time) !== null && _a !== void 0 ? _a : 0;\n        return audio.play();\n    }\n    async loop(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        await this.stop(options);\n        audio.loop = true;\n        return audio.play();\n    }\n    async stop(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        audio.pause();\n        audio.loop = false;\n        audio.currentTime = 0;\n    }\n    async unload(options) {\n        await this.stop(options);\n        NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.delete(options.assetId);\n    }\n    async setVolume(options) {\n        if (typeof (options === null || options === void 0 ? void 0 : options.volume) !== \"number\") {\n            throw \"no volume provided\";\n        }\n        const audio = this.getAudioAsset(options.assetId).audio;\n        audio.volume = options.volume;\n    }\n    async setRate(options) {\n        if (typeof (options === null || options === void 0 ? void 0 : options.rate) !== \"number\") {\n            throw \"no rate provided\";\n        }\n        const audio = this.getAudioAsset(options.assetId).audio;\n        audio.playbackRate = options.rate;\n    }\n    async isPlaying(options) {\n        const audio = this.getAudioAsset(options.assetId).audio;\n        return { isPlaying: !audio.paused };\n    }\n    getAudioAsset(assetId) {\n        this.checkAssetId(assetId);\n        if (!NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.has(assetId)) {\n            throw `no asset for assetId \"${assetId}\" available. Call preload first!`;\n        }\n        return NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.get(assetId);\n    }\n    checkAssetId(assetId) {\n        if (typeof assetId !== \"string\") {\n            throw \"assetId must be a string\";\n        }\n        if (!(assetId === null || assetId === void 0 ? void 0 : assetId.length)) {\n            throw \"no assetId provided\";\n        }\n    }\n}\nNativeAudioWeb.FILE_LOCATION = \"\";\nNativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID = new Map();\nexport { NativeAudioWeb };\nconst NativeAudio = new NativeAudioWeb();\nexport { NativeAudio };\n//# sourceMappingURL=web.js.map"],"names":[],"sourceRoot":""}