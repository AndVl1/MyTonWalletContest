{"version":3,"file":"src_util_fetch_ts-src_util_ledger_index_ts.10d7315e7af5701fb98e.js","mappings":"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","sources":["webpack://mytonwallet/./src/api/blockchains/ton/util/index.ts","webpack://mytonwallet/./src/api/blockchains/ton/util/tonCore.ts","webpack://mytonwallet/./src/api/common/utils.ts","webpack://mytonwallet/./src/api/environment.ts","webpack://mytonwallet/./src/util/compareVersions.ts","webpack://mytonwallet/./src/util/fetch.ts","webpack://mytonwallet/./src/util/ledger/index.ts","webpack://mytonwallet/./src/util/ledger/utils.ts","webpack://mytonwallet/./src/util/stringFormat.ts"],"sourcesContent":["import { bigintRandom, bigintReviver } from '../../../../util/bigint';\n\nexport function cloneDeep<T>(value: T): T {\n  return JSON.parse(JSON.stringify(value), bigintReviver);\n}\n\nexport function stringifyTxId({ lt, hash }: { lt: number | string; hash: string }) {\n  return `${lt}:${hash}`;\n}\n\nexport function parseTxId(txId: string): { lt: number; hash: string } {\n  const [lt, hash] = txId.split(':');\n  return { lt: Number(lt), hash };\n}\n\nexport function buildTokenSlug(minterAddress: string) {\n  const addressPart = minterAddress.replace(/[^a-z\\d]/gi, '').slice(0, 10);\n  return `ton-${addressPart}`.toLowerCase();\n}\n\nexport function generateQueryId() {\n  return bigintRandom(8);\n}\n","import type { OpenedContract } from '@ton/core';\nimport { Address, Builder, Cell } from '@ton/core';\nimport axios from 'axios';\nimport { WalletContractV1R1 } from '@ton/ton/dist/wallets/WalletContractV1R1';\nimport { WalletContractV1R2 } from '@ton/ton/dist/wallets/WalletContractV1R2';\nimport { WalletContractV1R3 } from '@ton/ton/dist/wallets/WalletContractV1R3';\nimport { WalletContractV2R1 } from '@ton/ton/dist/wallets/WalletContractV2R1';\nimport { WalletContractV2R2 } from '@ton/ton/dist/wallets/WalletContractV2R2';\nimport { WalletContractV3R1 } from '@ton/ton/dist/wallets/WalletContractV3R1';\nimport { WalletContractV3R2 } from '@ton/ton/dist/wallets/WalletContractV3R2';\nimport { WalletContractV4 } from '@ton/ton/dist/wallets/WalletContractV4';\nimport { WalletContractV5R1 } from '@ton/ton/dist/wallets/WalletContractV5R1';\n\nimport type { ApiDnsZone, ApiNetwork, ApiWalletVersion } from '../../../types';\nimport type { TokenTransferBodyParams } from '../types';\n\nimport {\n  DEFAULT_TIMEOUT,\n  TONHTTPAPI_MAINNET_API_KEY,\n  TONHTTPAPI_MAINNET_URL,\n  TONHTTPAPI_TESTNET_API_KEY,\n  TONHTTPAPI_TESTNET_URL,\n} from '../../../../config';\nimport axiosFetchAdapter from '../../../../lib/axios-fetch-adapter';\nimport { logDebugError } from '../../../../util/logs';\nimport withCacheAsync from '../../../../util/withCacheAsync';\nimport { DnsItem } from '../contracts/DnsItem';\nimport { JettonMinter } from '../contracts/JettonMaster';\nimport { JettonWallet } from '../contracts/JettonWallet';\nimport { hexToBytes } from '../../../common/utils';\nimport { getEnvironment } from '../../../environment';\nimport {\n  DEFAULT_IS_BOUNCEABLE,\n  DNS_ZONES_MAP,\n  JettonOpCode,\n  LiquidStakingOpCode,\n  OpCode,\n  WORKCHAIN,\n} from '../constants';\nimport { generateQueryId } from './index';\n\nimport { TonClient } from './TonClient';\n\nexport type TonWalletType = typeof WalletContractV1R1\n| typeof WalletContractV1R2\n| typeof WalletContractV1R3\n| typeof WalletContractV2R1\n| typeof WalletContractV2R2\n| typeof WalletContractV3R1\n| typeof WalletContractV3R2\n| typeof WalletContractV4\n| typeof WalletContractV5R1;\n\nexport type TonWallet = OpenedContract<WalletContractV1R1\n| WalletContractV1R2\n| WalletContractV1R3\n| WalletContractV2R1\n| WalletContractV2R2\n| WalletContractV3R1\n| WalletContractV3R2\n| WalletContractV4\n| WalletContractV5R1>;\n\naxios.defaults.adapter = axiosFetchAdapter;\n\nconst TON_MAX_COMMENT_BYTES = 127;\n\nlet clientByNetwork: Record<ApiNetwork, TonClient> | undefined;\n\nexport const walletClassMap: Record<ApiWalletVersion, TonWalletType> = {\n  simpleR1: WalletContractV1R1,\n  simpleR2: WalletContractV1R2,\n  simpleR3: WalletContractV1R3,\n  v2R1: WalletContractV2R1,\n  v2R2: WalletContractV2R2,\n  v3R1: WalletContractV3R1,\n  v3R2: WalletContractV3R2,\n  v4R2: WalletContractV4,\n  W5: WalletContractV5R1,\n};\n\nexport function getTonClient(network: ApiNetwork = 'mainnet') {\n  if (!clientByNetwork) {\n    clientByNetwork = {\n      mainnet: new TonClient({\n        endpoint: TONHTTPAPI_MAINNET_URL,\n        timeout: DEFAULT_TIMEOUT,\n        apiKey: TONHTTPAPI_MAINNET_API_KEY,\n        headers: getEnvironment().apiHeaders,\n      }),\n      testnet: new TonClient({\n        endpoint: TONHTTPAPI_TESTNET_URL,\n        timeout: DEFAULT_TIMEOUT,\n        apiKey: TONHTTPAPI_TESTNET_API_KEY,\n        headers: getEnvironment().apiHeaders,\n      }),\n    };\n  }\n\n  return clientByNetwork[network];\n}\n\nexport function getTonWalletContract(publicKeyHex: string, version: ApiWalletVersion) {\n  const walletClass = walletClassMap[version];\n  if (!walletClass) {\n    throw new Error('Unsupported wallet contract version');\n  }\n\n  const publicKey = Buffer.from(hexToBytes(publicKeyHex));\n  return walletClass.create({ workchain: WORKCHAIN, publicKey });\n}\n\nexport const resolveTokenWalletAddress = withCacheAsync(\n  async (network: ApiNetwork, address: string, minterAddress: string) => {\n    const minter = getTonClient(network).open(new JettonMinter(Address.parse(minterAddress)));\n    const walletAddress = await minter.getWalletAddress(Address.parse(address));\n    return toBase64Address(walletAddress, true, network);\n  },\n);\n\nexport const resolveTokenMinterAddress = withCacheAsync(async (network: ApiNetwork, tokenWalletAddress: string) => {\n  const tokenWallet = getTonClient(network).open(new JettonWallet(Address.parse(tokenWalletAddress)));\n  const data = await tokenWallet.getWalletData();\n  return toBase64Address(data.minter, true, network);\n});\n\nexport const getWalletPublicKey = withCacheAsync(async (network: ApiNetwork, address: string) => {\n  try {\n    const res = await getTonClient(network).callGetMethod(Address.parse(address), 'get_public_key');\n    const bigintKey = res.stack.readBigNumber();\n    const hex = bigintKey.toString(16).padStart(64, '0');\n    return hexToBytes(hex);\n  } catch (err) {\n    logDebugError('getWalletPublicKey', err);\n    return undefined;\n  }\n});\n\nexport function getJettonMinterData(network: ApiNetwork, address: string) {\n  const contract = getTonClient(network).open(new JettonMinter(Address.parse(address)));\n  return contract.getJettonData();\n}\n\nexport function oneCellFromBoc(bytes: Uint8Array) {\n  return Cell.fromBoc(Buffer.from(bytes));\n}\n\nexport function toBase64Address(address: Address | string, isBounceable = DEFAULT_IS_BOUNCEABLE, network?: ApiNetwork) {\n  if (typeof address === 'string') {\n    address = Address.parse(address);\n  }\n  return address.toString({\n    urlSafe: true,\n    bounceable: isBounceable,\n    testOnly: network === 'testnet',\n  });\n}\n\nexport function toRawAddress(address: Address | string) {\n  if (typeof address === 'string') {\n    address = Address.parse(address);\n  }\n  return address.toRawString();\n}\n\nexport function buildTokenTransferBody(params: TokenTransferBodyParams) {\n  const {\n    queryId, tokenAmount, toAddress, responseAddress, forwardAmount,\n  } = params;\n  let forwardPayload = params.forwardPayload;\n\n  let builder = new Builder()\n    .storeUint(JettonOpCode.Transfer, 32)\n    .storeUint(queryId || generateQueryId(), 64)\n    .storeCoins(tokenAmount)\n    .storeAddress(Address.parse(toAddress))\n    .storeAddress(Address.parse(responseAddress))\n    .storeBit(false)\n    .storeCoins(forwardAmount ?? 0n);\n\n  if (forwardPayload instanceof Uint8Array) {\n    const freeBytes = Math.round(builder.availableBits / 8);\n    forwardPayload = packBytesAsSnake(forwardPayload, freeBytes);\n  }\n\n  if (!forwardPayload) {\n    builder.storeBit(false);\n  } else if (typeof forwardPayload === 'string') {\n    builder = builder.storeBit(false)\n      .storeUint(0, 32)\n      .storeBuffer(Buffer.from(forwardPayload));\n  } else if (forwardPayload instanceof Uint8Array) {\n    builder = builder.storeBit(false)\n      .storeBuffer(Buffer.from(forwardPayload));\n  } else {\n    builder = builder.storeBit(true)\n      .storeRef(forwardPayload);\n  }\n\n  return builder.endCell();\n}\n\nexport function parseBase64(base64: string) {\n  try {\n    return Cell.fromBase64(base64);\n  } catch (err) {\n    logDebugError('parseBase64', err);\n    return Uint8Array.from(Buffer.from(base64, 'base64'));\n  }\n}\n\nexport function commentToBytes(comment: string): Uint8Array {\n  const buffer = Buffer.from(comment);\n  const bytes = new Uint8Array(buffer.length + 4);\n\n  const startBuffer = Buffer.alloc(4);\n  startBuffer.writeUInt32BE(OpCode.Comment);\n  bytes.set(startBuffer, 0);\n  bytes.set(buffer, 4);\n\n  return bytes;\n}\n\nexport function packBytesAsSnake(bytes: Uint8Array, maxBytes = TON_MAX_COMMENT_BYTES): Uint8Array | Cell {\n  const buffer = Buffer.from(bytes);\n  if (buffer.length <= maxBytes) {\n    return bytes;\n  }\n\n  return packBytesAsSnakeCell(bytes);\n}\n\nexport function packBytesAsSnakeCell(bytes: Uint8Array): Cell {\n  const buffer = Buffer.from(bytes);\n\n  const mainBuilder = new Builder();\n  let prevBuilder: Builder | undefined;\n  let currentBuilder = mainBuilder;\n\n  for (const [i, byte] of buffer.entries()) {\n    if (currentBuilder.availableBits < 8) {\n      prevBuilder?.storeRef(currentBuilder);\n\n      prevBuilder = currentBuilder;\n      currentBuilder = new Builder();\n    }\n\n    currentBuilder = currentBuilder.storeUint(byte, 8);\n\n    if (i === buffer.length - 1) {\n      prevBuilder?.storeRef(currentBuilder);\n    }\n  }\n\n  return mainBuilder.asCell();\n}\n\nfunction createNestedCell(data: Uint8Array, maxCellSize: number): Cell {\n  const builder = new Builder();\n  const dataSlice = Buffer.from(data.slice(0, maxCellSize));\n\n  builder.storeBuffer(dataSlice);\n\n  if (data.length > maxCellSize) {\n    const remainingData = data.slice(maxCellSize);\n    builder.storeRef(createNestedCell(remainingData, maxCellSize));\n  }\n\n  return builder.endCell();\n}\n\nexport function packBytesAsSnakeForEncryptedData(data: Uint8Array): Uint8Array | Cell {\n  const ROOT_BUILDER_BYTES = 39;\n  const MAX_CELLS_AMOUNT = 16;\n\n  const rootBuilder = new Builder();\n  rootBuilder.storeBuffer(Buffer.from(data.slice(0, Math.min(data.length, ROOT_BUILDER_BYTES))));\n\n  if (data.length > ROOT_BUILDER_BYTES + MAX_CELLS_AMOUNT * TON_MAX_COMMENT_BYTES) {\n    throw new Error('Input text is too long');\n  }\n\n  rootBuilder.storeRef(createNestedCell(Buffer.from(data.slice(ROOT_BUILDER_BYTES)), TON_MAX_COMMENT_BYTES));\n\n  return rootBuilder.endCell();\n}\n\nexport function buildLiquidStakingDepositBody(queryId?: number) {\n  return new Builder()\n    .storeUint(LiquidStakingOpCode.Deposit, 32)\n    .storeUint(queryId || 0, 64)\n    .asCell();\n}\n\nexport function buildLiquidStakingWithdrawBody(options: {\n  queryId?: number;\n  amount: bigint;\n  responseAddress: string;\n  waitTillRoundEnd?: boolean; // opposite of request_immediate_withdrawal\n  fillOrKill?: boolean;\n}) {\n  const {\n    queryId, amount, responseAddress, waitTillRoundEnd, fillOrKill,\n  } = options;\n\n  const customPayload = buildLiquidStakingWithdrawCustomPayload(waitTillRoundEnd, fillOrKill);\n\n  return new Builder()\n    .storeUint(JettonOpCode.Burn, 32)\n    .storeUint(queryId ?? 0, 64)\n    .storeCoins(amount)\n    .storeAddress(Address.parse(responseAddress))\n    .storeBit(1)\n    .storeRef(customPayload)\n    .asCell();\n}\n\nexport function buildLiquidStakingWithdrawCustomPayload(waitTillRoundEnd?: boolean, fillOrKill?: boolean) {\n  return new Builder()\n    .storeUint(Number(waitTillRoundEnd), 1)\n    .storeUint(Number(fillOrKill), 1)\n    .asCell();\n}\n\nexport function getTokenBalance(network: ApiNetwork, walletAddress: string) {\n  const tokenWallet = getTonClient(network).open(new JettonWallet(Address.parse(walletAddress)));\n  return tokenWallet.getJettonBalance();\n}\n\nexport function parseAddress(address: string): {\n  isValid: boolean;\n  isRaw?: boolean;\n  isUserFriendly?: boolean;\n  isBounceable?: boolean;\n  isTestOnly?: boolean;\n  address?: Address;\n} {\n  try {\n    if (Address.isRaw(address)) {\n      return {\n        address: Address.parseRaw(address),\n        isRaw: true,\n        isValid: true,\n      };\n    } else if (Address.isFriendly(address)) {\n      return {\n        ...Address.parseFriendly(address),\n        isUserFriendly: true,\n        isValid: true,\n      };\n    }\n  } catch (err) {\n    // Do nothing\n  }\n\n  return { isValid: false };\n}\n\nexport function getIsRawAddress(address: string) {\n  return Boolean(parseAddress(address).isRaw);\n}\n\nexport async function getDnsItemDomain(network: ApiNetwork, address: Address | string) {\n  if (typeof address === 'string') address = Address.parse(address);\n\n  const contract = getTonClient(network)\n    .open(new DnsItem(address));\n  const nftData = await contract.getNftData();\n  const collectionAddress = toBase64Address(nftData.collectionAddress, true);\n\n  const zone = Object.entries(DNS_ZONES_MAP)\n    .find(([, collection]) => collection === collectionAddress)?.[0] as ApiDnsZone | undefined;\n\n  const base = zone === '.t.me'\n    ? await contract.getTelemintDomain()\n    : await contract.getDomain();\n\n  return `${base}${zone}`;\n}\n","import { STAKING_POOLS } from '../../config';\n\nexport function sha256(bytes: Uint8Array) {\n  return crypto.subtle.digest('SHA-256', bytes);\n}\n\nexport function bytesToHex(bytes: Uint8Array) {\n  return Buffer.from(bytes).toString('hex');\n}\n\nexport function hexToBytes(hex: string) {\n  return Uint8Array.from(Buffer.from(hex, 'hex'));\n}\n\nexport function bytesToBase64(bytes: Uint8Array) {\n  return Buffer.from(bytes).toString('base64');\n}\n\nexport function base64ToBytes(base64: string) {\n  return Uint8Array.from(Buffer.from(base64, 'base64'));\n}\n\nexport function base64ToString(base64: string) {\n  return Buffer.from(base64, 'base64').toString('utf-8');\n}\n\nexport function isKnownStakingPool(address: string) {\n  return STAKING_POOLS.some((poolPart) => address.endsWith(poolPart));\n}\n","/*\n * This module is to be used instead of /src/util/environment.ts\n * when `window` is not available (e.g. in a web worker).\n */\nimport type { ApiInitArgs } from './types';\n\nimport {\n  ELECTRON_TONHTTPAPI_MAINNET_API_KEY,\n  ELECTRON_TONHTTPAPI_TESTNET_API_KEY,\n  IS_CAPACITOR,\n  IS_EXTENSION,\n  TONHTTPAPI_MAINNET_API_KEY,\n  TONHTTPAPI_TESTNET_API_KEY,\n} from '../config';\n\nconst ELECTRON_ORIGIN = 'file://';\n\nlet environment: ApiInitArgs & {\n  isDappSupported: boolean;\n  isSseSupported: boolean;\n  apiHeaders?: AnyLiteral;\n  tonhttpapiMainnetKey?: string;\n  tonhttpapiTestnetKey?: string;\n};\n\nexport function setEnvironment(args: ApiInitArgs) {\n  environment = {\n    ...args,\n    isDappSupported: IS_EXTENSION || IS_CAPACITOR || args.isElectron,\n    isSseSupported: args.isElectron || (IS_CAPACITOR && !args.isNativeBottomSheet),\n    // eslint-disable-next-line no-restricted-globals\n    apiHeaders: { 'X-App-Origin': args.isElectron ? ELECTRON_ORIGIN : self?.origin },\n    tonhttpapiMainnetKey: args.isElectron ? ELECTRON_TONHTTPAPI_MAINNET_API_KEY : TONHTTPAPI_MAINNET_API_KEY,\n    tonhttpapiTestnetKey: args.isElectron ? ELECTRON_TONHTTPAPI_TESTNET_API_KEY : TONHTTPAPI_TESTNET_API_KEY,\n  };\n  return environment;\n}\n\nexport function getEnvironment() {\n  return environment;\n}\n","export default function compareVersions(versionA: string, versionB: string): -1 | 0 | 1 {\n  const partsA = versionA.split('.').map(Number);\n  const partsB = versionB.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {\n    const partA = partsA[i] || 0;\n    const partB = partsB[i] || 0;\n\n    if (partA > partB) return 1;\n    if (partA < partB) return -1;\n  }\n\n  return 0;\n}\n","import { DEFAULT_ERROR_PAUSE, DEFAULT_RETRIES, DEFAULT_TIMEOUT } from '../config';\nimport { ApiServerError } from '../api/errors';\nimport { logDebug } from './logs';\nimport { pause } from './schedulers';\n\ntype QueryParams = Record<string, string | number | boolean | string[]>;\n\nconst MAX_TIMEOUT = 30000; // 30 sec\n\nexport async function fetchJson(url: string | URL, data?: QueryParams, init?: RequestInit) {\n  const urlObject = new URL(url);\n  if (data) {\n    Object.entries(data).forEach(([key, value]) => {\n      if (value === undefined) {\n        return;\n      }\n\n      if (Array.isArray(value)) {\n        value.forEach((item) => {\n          urlObject.searchParams.append(key, item.toString());\n        });\n      } else {\n        urlObject.searchParams.set(key, value.toString());\n      }\n    });\n  }\n\n  const response = await fetchWithRetry(urlObject, init);\n\n  return response.json();\n}\n\nexport async function fetchWithRetry(url: string | URL, init?: RequestInit, options?: {\n  retries?: number;\n  timeouts?: number | number[];\n  shouldSkipRetryFn?: (message?: string, statusCode?: number) => boolean;\n}) {\n  const {\n    retries = DEFAULT_RETRIES,\n    timeouts = DEFAULT_TIMEOUT,\n    shouldSkipRetryFn = isNotTemporaryError,\n  } = options ?? {};\n\n  let message = 'Unknown error.';\n  let statusCode: number | undefined;\n\n  for (let i = 1; i <= retries; i++) {\n    try {\n      if (i > 1) {\n        logDebug(`Retry request #${i}:`, url.toString(), statusCode);\n      }\n\n      const timeout = Array.isArray(timeouts)\n        ? timeouts[i - 1] ?? timeouts[timeouts.length - 1]\n        : Math.min(timeouts * i, MAX_TIMEOUT);\n      const response = await fetchWithTimeout(url, init, timeout);\n      statusCode = response.status;\n\n      if (statusCode >= 400) {\n        const { error } = await response.json().catch(() => undefined);\n        throw new Error(error ?? `HTTP Error ${statusCode}`);\n      }\n\n      return response;\n    } catch (err: any) {\n      message = typeof err === 'string' ? err : err.message ?? message;\n\n      const shouldSkipRetry = shouldSkipRetryFn(message, statusCode);\n\n      if (shouldSkipRetry) {\n        throw new ApiServerError(message, statusCode);\n      }\n\n      if (i < retries) {\n        await pause(DEFAULT_ERROR_PAUSE * i);\n      }\n    }\n  }\n\n  throw new ApiServerError(message);\n}\n\nexport async function fetchWithTimeout(url: string | URL, init?: RequestInit, timeout = DEFAULT_TIMEOUT) {\n  const controller = new AbortController();\n  const id = setTimeout(() => {\n    controller.abort();\n  }, timeout);\n\n  try {\n    return await fetch(url, {\n      ...init,\n      signal: controller.signal,\n      cache: 'no-cache', // TODO Remove it after a few releases\n    });\n  } finally {\n    clearTimeout(id);\n  }\n}\n\nexport async function handleFetchErrors(response: Response, ignoreHttpCodes?: number[]) {\n  if (!response.ok && (!ignoreHttpCodes?.includes(response.status))) {\n    // eslint-disable-next-line prefer-const\n    let { error, errors } = await response.json().catch(() => undefined);\n    if (!error && errors && errors.length) {\n      error = errors[0]?.msg;\n    }\n\n    throw new ApiServerError(error ?? `HTTP Error ${response.status}`, response.status);\n  }\n  return response;\n}\n\nfunction isNotTemporaryError(message?: string, statusCode?: number) {\n  return statusCode && [400, 404].includes(statusCode);\n}\n","import { StatusCodes } from '@ledgerhq/errors';\nimport TransportWebHID from '@ledgerhq/hw-transport-webhid';\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport type { StateInit } from '@ton/core';\nimport { loadStateInit } from '@ton/core';\nimport type { TonPayloadFormat } from '@ton-community/ton-ledger';\nimport { KNOWN_JETTONS, parseMessage, TonTransport } from '@ton-community/ton-ledger';\nimport { Address } from '@ton/core/dist/address/Address';\nimport { Builder } from '@ton/core/dist/boc/Builder';\nimport { Cell } from '@ton/core/dist/boc/Cell';\nimport { SendMode } from '@ton/core/dist/types/SendMode';\n\nimport type { ApiTonConnectProof } from '../../api/tonConnect/types';\nimport type {\n  ApiDappTransfer,\n  ApiLocalTransactionParams,\n  ApiNetwork, ApiNft,\n  ApiSignedTransfer,\n  ApiStakingType,\n  ApiSubmitTransferOptions,\n  Workchain,\n} from '../../api/types';\nimport type { LedgerWalletInfo } from './types';\nimport { ApiLiquidUnstakeMode, ApiTransactionError } from '../../api/types';\n\nimport {\n  BURN_ADDRESS, LIQUID_JETTON, LIQUID_POOL,\n  NOTCOIN_EXCHANGERS, NOTCOIN_VOUCHERS_ADDRESS, ONE_TON, TONCOIN_SLUG,\n} from '../../config';\nimport { callApi } from '../../api';\nimport {\n  DEFAULT_IS_BOUNCEABLE,\n  NFT_TRANSFER_TONCOIN_AMOUNT,\n  NFT_TRANSFER_TONCOIN_FORWARD_AMOUNT,\n  STAKE_COMMENT,\n  TOKEN_TRANSFER_TONCOIN_AMOUNT,\n  TOKEN_TRANSFER_TONCOIN_FORWARD_AMOUNT,\n  TRANSFER_TIMEOUT_SEC,\n  UNSTAKE_COMMENT,\n  WALLET_IS_BOUNCEABLE,\n  WORKCHAIN,\n} from '../../api/blockchains/ton/constants';\nimport {\n  buildLiquidStakingWithdrawCustomPayload,\n  commentToBytes,\n  packBytesAsSnakeCell,\n  toBase64Address,\n} from '../../api/blockchains/ton/util/tonCore';\nimport {\n  ApiHardwareBlindSigningNotEnabled,\n  ApiUnsupportedVersionError,\n  ApiUserRejectsError,\n  handleServerError,\n} from '../../api/errors';\nimport { parseAccountId } from '../account';\nimport compareVersions from '../compareVersions';\nimport { logDebugError } from '../logs';\nimport { pause } from '../schedulers';\nimport { isValidLedgerComment } from './utils';\n\ntype TransactionParams = {\n  to: Address;\n  sendMode: SendMode;\n  seqno: number;\n  timeout: number;\n  bounce: boolean;\n  amount: bigint;\n  stateInit?: StateInit;\n  payload?: TonPayloadFormat;\n  walletSpecifiers?: {\n    subwalletId?: number;\n    includeWalletOp: boolean;\n  };\n};\n\nconst CHAIN = 0; // workchain === -1 ? 255 : 0;\nconst WALLET_VERSION = 'v4R2';\nconst INTERNAL_WALLET_VERSION = 'v4';\nconst ATTEMPTS = 10;\nconst PAUSE = 125;\nconst IS_BOUNCEABLE = false;\nconst VERSION_WITH_UNSAFE = '2.1.0';\nconst VERSION_WITH_JETTON_ID = '2.2.0';\nconst VESTING_SUBWALLET_ID = 0x10C;\n\nconst knownJettonAddresses = KNOWN_JETTONS.map(\n  ({ masterAddress }) => masterAddress.toString({ bounceable: true, urlSafe: true }),\n);\n\nlet transport: TransportWebHID | TransportWebUSB | undefined;\nlet tonTransport: TonTransport | undefined;\n\nexport async function importLedgerWallet(network: ApiNetwork, accountIndex: number) {\n  const walletInfo = await getLedgerWalletInfo(network, accountIndex);\n  return callApi('importLedgerWallet', network, walletInfo);\n}\n\nexport async function reconnectLedger() {\n  try {\n    if (tonTransport && await tonTransport?.isAppOpen()) {\n      return true;\n    }\n  } catch {\n    // do nothing\n  }\n\n  return await connectLedger() && await waitLedgerTonApp();\n}\n\nexport async function connectLedger() {\n  try {\n    if (await TransportWebHID.isSupported()) {\n      transport = await connectHID();\n    } else if (await TransportWebUSB.isSupported()) {\n      transport = await connectUSB();\n    } else {\n      logDebugError('connectLedger: HID and/or USB are not supported');\n      return false;\n    }\n    tonTransport = new TonTransport(transport);\n    return true;\n  } catch (err) {\n    logDebugError('connectLedger', err);\n    return false;\n  }\n}\n\nfunction waitLedgerTonAppDeadline(): Promise<boolean> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(false);\n    }, PAUSE * ATTEMPTS);\n  });\n}\n\nexport async function checkTonApp() {\n  for (let i = 0; i < ATTEMPTS; i++) {\n    try {\n      const isTonOpen = await tonTransport!.isAppOpen();\n\n      if (isTonOpen) {\n        // Workaround for Ledger S, this is a way to check if it is unlocked.\n        // There will be an error with code 0x530c\n        await tonTransport?.getAddress(getLedgerAccountPathByIndex(0), {\n          walletVersion: INTERNAL_WALLET_VERSION,\n        });\n\n        return true;\n      }\n    } catch (err: any) {\n      if (!err?.message.includes('0x530c')) {\n        logDebugError('waitLedgerTonApp', err);\n      }\n    }\n\n    await pause(PAUSE);\n  }\n\n  return false;\n}\n\nexport function waitLedgerTonApp() {\n  return Promise.race([\n    checkTonApp(),\n    waitLedgerTonAppDeadline(),\n  ]);\n}\n\nasync function connectHID() {\n  for (let i = 0; i < ATTEMPTS; i++) {\n    const [device] = await TransportWebHID.list();\n\n    if (!device) {\n      await TransportWebHID.create();\n      await pause(PAUSE);\n      continue;\n    }\n\n    if (device.opened) {\n      return new TransportWebHID(device);\n    } else {\n      return TransportWebHID.open(device);\n    }\n  }\n\n  throw new Error('Failed to connect');\n}\n\nasync function connectUSB() {\n  for (let i = 0; i < ATTEMPTS; i++) {\n    const [device] = await TransportWebUSB.list();\n\n    if (!device) {\n      await TransportWebUSB.create();\n      await pause(PAUSE);\n      continue;\n    }\n\n    if (device.opened) {\n      return (await TransportWebUSB.openConnected()) ?? (await TransportWebUSB.request());\n    } else {\n      return TransportWebUSB.open(device);\n    }\n  }\n\n  throw new Error('Failed to connect');\n}\n\nexport async function submitLedgerStake(\n  accountId: string,\n  amount: bigint,\n  type: ApiStakingType,\n  fee?: bigint,\n) {\n  const { network } = parseAccountId(accountId);\n  const address = await callApi('fetchAddress', accountId);\n\n  let result: string | { error: ApiTransactionError } | undefined;\n\n  if (type === 'liquid') {\n    amount += ONE_TON;\n\n    const payload: TonPayloadFormat = {\n      type: 'tonstakers-deposit',\n      queryId: 0n,\n      // eslint-disable-next-line no-null/no-null\n      appId: null,\n    };\n\n    result = await submitLedgerTransfer({\n      accountId,\n      password: '',\n      toAddress: LIQUID_POOL,\n      amount,\n    }, TONCOIN_SLUG, { type: 'stake' }, payload);\n  } else {\n    const backendState = await callApi('fetchBackendStakingState', address!);\n    const poolAddress = toBase64Address(backendState!.nominatorsPool.address, true, network);\n\n    result = await submitLedgerTransfer({\n      accountId,\n      password: '',\n      toAddress: poolAddress,\n      amount,\n      comment: STAKE_COMMENT,\n      fee,\n    }, TONCOIN_SLUG, { type: 'stake' });\n  }\n\n  if (result) {\n    await callApi('updateAccountMemoryCache', accountId, address!, { stakedAt: Date.now() });\n  }\n\n  await callApi('onStakingChangeExpected');\n\n  return result;\n}\n\nexport async function submitLedgerUnstake(accountId: string, type: ApiStakingType, amount: bigint) {\n  const { network } = parseAccountId(accountId);\n  const address = (await callApi('fetchAddress', accountId))!;\n  const { backendState, state: stakingState } = (await callApi('getStakingState', accountId))!;\n\n  let result: string | { error: ApiTransactionError } | undefined;\n\n  if (type === 'liquid') {\n    const tokenWalletAddress = await callApi('resolveTokenWalletAddress', network, address, LIQUID_JETTON);\n    const mode = stakingState.type === 'liquid' && !stakingState.instantAvailable\n      ? ApiLiquidUnstakeMode.BestRate\n      : ApiLiquidUnstakeMode.Default;\n\n    const fillOrKill = false;\n    const waitTillRoundEnd = mode === ApiLiquidUnstakeMode.BestRate;\n\n    const payload: TonPayloadFormat = {\n      type: 'jetton-burn',\n      queryId: 0n,\n      amount,\n      responseDestination: Address.parse(address),\n      customPayload: buildLiquidStakingWithdrawCustomPayload(fillOrKill, waitTillRoundEnd),\n    };\n\n    result = await submitLedgerTransfer({\n      accountId,\n      password: '',\n      toAddress: tokenWalletAddress!,\n      amount: ONE_TON,\n    }, TONCOIN_SLUG, { type: 'unstakeRequest' }, payload);\n  } else {\n    const poolAddress = toBase64Address(backendState!.nominatorsPool.address, true, network);\n    result = await submitLedgerTransfer({\n      accountId,\n      password: '',\n      toAddress: poolAddress,\n      amount: ONE_TON,\n      comment: UNSTAKE_COMMENT,\n    }, TONCOIN_SLUG, { type: 'unstakeRequest' });\n  }\n\n  await callApi('onStakingChangeExpected');\n\n  return result;\n}\n\nexport async function submitLedgerTransfer(\n  options: ApiSubmitTransferOptions,\n  slug: string,\n  localTransactionParams?: Partial<ApiLocalTransactionParams>,\n  payload?: TonPayloadFormat,\n) {\n  const {\n    accountId, tokenAddress, comment, fee,\n  } = options;\n  let { toAddress, amount } = options;\n  const { network } = parseAccountId(accountId);\n\n  await callApi('waitLastTransfer', accountId);\n\n  const fromAddress = await callApi('fetchAddress', accountId);\n\n  const [path, walletInfo, appInfo] = await Promise.all([\n    getLedgerAccountPath(accountId),\n    callApi('getWalletInfo', network, fromAddress!),\n    getTonAppInfo(),\n  ]);\n\n  const { seqno, balance } = walletInfo!;\n\n  const parsedAddress = Address.parseFriendly(toAddress);\n  let isBounceable = parsedAddress.isBounceable;\n  const normalizedAddress = parsedAddress.address.toString({ urlSafe: true, bounceable: DEFAULT_IS_BOUNCEABLE });\n\n  const { isUnsafeSupported, isJettonIdSupported } = appInfo;\n\n  if (tokenAddress) {\n    ({ toAddress, amount, payload } = await buildLedgerTokenTransfer(\n      network,\n      tokenAddress,\n      fromAddress!,\n      toAddress,\n      amount,\n      comment,\n      isJettonIdSupported,\n    ));\n    isBounceable = true;\n  } else if (comment) {\n    if (isValidLedgerComment(comment)) {\n      payload = { type: 'comment', text: comment };\n    } else if (isUnsafeSupported) {\n      payload = { type: 'unsafe', message: buildCommentPayload(comment) };\n    } else {\n      return {\n        error: ApiTransactionError.NotSupportedHardwareOperation,\n      };\n    }\n  }\n\n  const isFullTonBalance = !tokenAddress && balance === amount;\n\n  const sendMode = isFullTonBalance\n    ? SendMode.CARRY_ALL_REMAINING_BALANCE\n    : SendMode.PAY_GAS_SEPARATELY + SendMode.IGNORE_ERRORS;\n\n  try {\n    const signedCell = await tonTransport!.signTransaction(path, {\n      to: Address.parse(toAddress),\n      sendMode,\n      seqno: seqno!,\n      timeout: getTransferExpirationTime(),\n      bounce: isBounceable,\n      amount: BigInt(amount),\n      payload,\n    });\n\n    const message: ApiSignedTransfer = {\n      base64: signedCell.toBoc().toString('base64'),\n      seqno: seqno!,\n      params: {\n        amount: options.amount,\n        fromAddress: fromAddress!,\n        toAddress: normalizedAddress,\n        comment,\n        fee: fee!,\n        slug,\n        ...localTransactionParams,\n      },\n    };\n\n    return await callApi('sendSignedTransferMessage', accountId, message);\n  } catch (err: any) {\n    handleLedgerErrors(err);\n    logDebugError('submitLedgerTransfer', err);\n    return undefined;\n  }\n}\n\nexport async function submitLedgerNftTransfer(options: {\n  accountId: string;\n  password: string;\n  nftAddress: string;\n  toAddress: string;\n  comment?: string;\n  nft?: ApiNft;\n  fee?: bigint;\n}) {\n  const {\n    accountId, nftAddress, comment, nft, fee,\n  } = options;\n  let { toAddress } = options;\n  const { network } = parseAccountId(accountId);\n\n  await callApi('waitLastTransfer', accountId);\n\n  const fromAddress = await callApi('fetchAddress', accountId);\n\n  const [path, walletInfo, appInfo] = await Promise.all([\n    getLedgerAccountPath(accountId),\n    callApi('getWalletInfo', network, fromAddress!),\n    getTonAppInfo(),\n  ]);\n\n  if (!appInfo.isUnsafeSupported) {\n    return {\n      error: ApiTransactionError.NotSupportedHardwareOperation,\n    };\n  }\n\n  const { seqno } = walletInfo!;\n\n  const isNotcoinBurn = nft?.collectionAddress === NOTCOIN_VOUCHERS_ADDRESS\n    && (toAddress === BURN_ADDRESS || NOTCOIN_EXCHANGERS.includes(toAddress as any));\n  // eslint-disable-next-line no-null/no-null\n  let forwardPayload: Cell | null = null;\n  let forwardAmount = NFT_TRANSFER_TONCOIN_FORWARD_AMOUNT;\n\n  if (isNotcoinBurn) {\n    ({ forwardPayload, toAddress } = buildNotcoinVoucherExchange(nftAddress, nft!.index));\n    forwardAmount = 50000000n;\n  } else if (comment) {\n    forwardPayload = buildCommentPayload(comment);\n  }\n\n  try {\n    const signedCell = await tonTransport!.signTransaction(path, {\n      to: Address.parse(nftAddress),\n      sendMode: SendMode.PAY_GAS_SEPARATELY + SendMode.IGNORE_ERRORS,\n      seqno: seqno!,\n      timeout: getTransferExpirationTime(),\n      bounce: true,\n      amount: NFT_TRANSFER_TONCOIN_AMOUNT,\n      payload: {\n        type: 'nft-transfer',\n        queryId: 0n,\n        newOwner: Address.parse(toAddress),\n        responseDestination: Address.parse(fromAddress!),\n        // eslint-disable-next-line no-null/no-null\n        customPayload: null,\n        forwardAmount,\n        forwardPayload,\n      },\n    });\n\n    const message: ApiSignedTransfer = {\n      base64: signedCell.toBoc().toString('base64'),\n      seqno: seqno!,\n      params: {\n        amount: NFT_TRANSFER_TONCOIN_AMOUNT,\n        fromAddress: fromAddress!,\n        toAddress: options.toAddress,\n        comment,\n        fee: fee!,\n        slug: TONCOIN_SLUG,\n        type: 'nftTransferred',\n        nft,\n        normalizedAddress: toBase64Address(nftAddress, true, network),\n      },\n    };\n\n    return await callApi('sendSignedTransferMessage', accountId, message);\n  } catch (error) {\n    logDebugError('submitLedgerNftTransfer', error);\n    return undefined;\n  }\n}\n\nfunction buildNotcoinVoucherExchange(nftAddress: string, nftIndex: number) {\n  // eslint-disable-next-line no-bitwise\n  const first4Bits = Address.parse(nftAddress).hash.readUint8() >> 4;\n  const toAddress = NOTCOIN_EXCHANGERS[first4Bits];\n\n  const forwardPayload = new Builder()\n    .storeUint(0x5fec6642, 32)\n    .storeUint(nftIndex, 64)\n    .endCell();\n\n  return { forwardPayload, toAddress };\n}\n\nexport async function buildLedgerTokenTransfer(\n  network: ApiNetwork,\n  tokenAddress: string,\n  fromAddress: string,\n  toAddress: string,\n  amount: bigint,\n  comment?: string,\n  isJettonIdSupported?: boolean,\n) {\n  const tokenWalletAddress = await callApi('resolveTokenWalletAddress', network, fromAddress, tokenAddress);\n  const realTokenAddress = await callApi('resolveTokenMinterAddress', network, tokenWalletAddress!);\n  if (tokenAddress !== realTokenAddress) {\n    throw new Error('Invalid contract');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  const forwardPayload = comment ? buildCommentPayload(comment) : null;\n\n  const payload: TonPayloadFormat = {\n    type: 'jetton-transfer',\n    queryId: 0n,\n    amount,\n    destination: Address.parse(toAddress),\n    responseDestination: Address.parse(fromAddress),\n    // eslint-disable-next-line no-null/no-null\n    customPayload: null,\n    forwardAmount: TOKEN_TRANSFER_TONCOIN_FORWARD_AMOUNT,\n    forwardPayload,\n    // eslint-disable-next-line no-null/no-null\n    knownJetton: isJettonIdSupported ? getKnownJettonId(tokenAddress) : null,\n  };\n\n  return {\n    amount: TOKEN_TRANSFER_TONCOIN_AMOUNT,\n    toAddress: tokenWalletAddress!,\n    payload,\n  };\n}\n\nfunction getKnownJettonId(tokenAddress: string) {\n  const index = knownJettonAddresses.indexOf(tokenAddress);\n  // eslint-disable-next-line no-null/no-null\n  return index > -1 ? { jettonId: index, workchain: WORKCHAIN } : null;\n}\n\nfunction buildCommentPayload(comment: string) {\n  const bytes = commentToBytes(comment);\n  return packBytesAsSnakeCell(bytes);\n}\n\nexport async function signLedgerTransactions(accountId: string, messages: ApiDappTransfer[], options?: {\n  isTonConnect?: boolean;\n  vestingAddress?: string;\n}): Promise<ApiSignedTransfer[]> {\n  const { isTonConnect, vestingAddress } = options ?? {};\n\n  const { network } = parseAccountId(accountId);\n\n  await callApi('waitLastTransfer', accountId);\n\n  const [path, fromAddress, appInfo] = await Promise.all([\n    getLedgerAccountPath(accountId),\n    callApi('fetchAddress', accountId),\n    getTonAppInfo(),\n  ]);\n\n  const { isUnsafeSupported, isJettonIdSupported } = appInfo;\n\n  if (isTonConnect && !isUnsafeSupported) {\n    throw new ApiUnsupportedVersionError('Please update Ledger TON app.');\n  }\n\n  const seqno = await callApi('getWalletSeqno', accountId, vestingAddress);\n  const walletSpecifiers: TransactionParams['walletSpecifiers'] = vestingAddress\n    ? { subwalletId: VESTING_SUBWALLET_ID, includeWalletOp: false }\n    : undefined;\n\n  const preparedParams: TransactionParams[] = await Promise.all(messages.map(async (message, index) => {\n    const {\n      toAddress,\n      amount,\n      stateInit: stateInitBase64,\n      rawPayload,\n    } = message;\n\n    const isBounceable = Address.isFriendly(toAddress)\n      ? Address.parseFriendly(toAddress).isBounceable\n      : DEFAULT_IS_BOUNCEABLE;\n\n    let ledgerPayload: TonPayloadFormat | undefined;\n\n    if (rawPayload) {\n      ledgerPayload = parseMessage(Cell.fromBase64(rawPayload), { disallowModification: true });\n    }\n\n    if (ledgerPayload?.type === 'jetton-transfer') {\n      const tokenAddress = await callApi('resolveTokenMinterAddress', network, toAddress);\n      // eslint-disable-next-line no-null/no-null\n      ledgerPayload.knownJetton = isJettonIdSupported ? getKnownJettonId(tokenAddress!) : null;\n    }\n\n    const stateInit = stateInitBase64 ? loadStateInit(\n      Cell.fromBase64(stateInitBase64).asSlice(),\n    ) : undefined;\n\n    return {\n      to: Address.parse(toAddress),\n      sendMode: SendMode.PAY_GAS_SEPARATELY + SendMode.IGNORE_ERRORS,\n      seqno: seqno! + index,\n      timeout: getTransferExpirationTime(),\n      bounce: isBounceable,\n      amount: BigInt(amount),\n      payload: ledgerPayload,\n      walletSpecifiers,\n      stateInit,\n    };\n  }));\n\n  const signedMessages: ApiSignedTransfer[] = [];\n\n  const attempts = ATTEMPTS + preparedParams.length;\n  let index = 0;\n  let attempt = 0;\n\n  while (index < preparedParams.length && attempt < attempts) {\n    const params = preparedParams[index];\n    const message = messages[index];\n\n    try {\n      const base64 = (await tonTransport!.signTransaction(path, params)).toBoc().toString('base64');\n      signedMessages.push({\n        base64,\n        seqno: params.seqno,\n        params: {\n          amount: message.amount,\n          fromAddress: fromAddress!,\n          toAddress: message.toAddress,\n          comment: message.payload?.type === 'comment' ? message.payload.comment : undefined,\n          fee: 0n,\n          slug: TONCOIN_SLUG,\n        },\n      });\n      index++;\n    } catch (err: any) {\n      handleLedgerErrors(err);\n      logDebugError('signLedgerTransactions', err);\n    }\n    attempt++;\n  }\n\n  return signedMessages;\n}\n\nexport async function signLedgerProof(accountId: string, proof: ApiTonConnectProof): Promise<string> {\n  const path = await getLedgerAccountPath(accountId);\n\n  const { timestamp, domain, payload } = proof;\n\n  const result = await tonTransport!.getAddressProof(path, {\n    domain,\n    timestamp,\n    payload: Buffer.from(payload),\n  });\n  return result.signature.toString('base64');\n}\n\nexport async function getNextLedgerWallets(\n  network: ApiNetwork,\n  lastExistingIndex = -1,\n  alreadyImportedAddresses: string[] = [],\n) {\n  const result: LedgerWalletInfo[] = [];\n  let index = lastExistingIndex + 1;\n\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const walletInfo = await getLedgerWalletInfo(network, index);\n\n      if (alreadyImportedAddresses.includes(walletInfo.address)) {\n        index += 1;\n        continue;\n      }\n\n      if (walletInfo.balance !== 0n) {\n        result.push(walletInfo);\n        index += 1;\n        continue;\n      }\n\n      if (!result.length) {\n        result.push(walletInfo);\n      }\n\n      return result;\n    }\n  } catch (err) {\n    return handleServerError(err);\n  }\n}\n\nexport async function getLedgerWalletInfo(network: ApiNetwork, accountIndex: number): Promise<LedgerWalletInfo> {\n  const { address, publicKey } = await getLedgerWalletAddress(accountIndex);\n  const balance = (await callApi('getWalletBalance', network, address))!;\n\n  return {\n    index: accountIndex,\n    address,\n    publicKey: publicKey!.toString('hex'),\n    balance,\n    version: WALLET_VERSION,\n    driver: 'HID',\n    deviceId: transport!.deviceModel?.id,\n    deviceName: transport!.deviceModel?.productName,\n  };\n}\n\nexport function getLedgerWalletAddress(index: number, isTestnet?: boolean) {\n  const path = getLedgerAccountPathByIndex(index, isTestnet);\n\n  return tonTransport!.getAddress(path, {\n    chain: CHAIN,\n    bounceable: WALLET_IS_BOUNCEABLE,\n    walletVersion: INTERNAL_WALLET_VERSION,\n  });\n}\n\nexport async function verifyAddress(accountId: string) {\n  const path = await getLedgerAccountPath(accountId);\n\n  await tonTransport!.validateAddress(path, {\n    bounceable: IS_BOUNCEABLE,\n    walletVersion: INTERNAL_WALLET_VERSION,\n  });\n}\n\nasync function getLedgerAccountPath(accountId: string) {\n  const accountInfo = await callApi('fetchAccount', accountId);\n  const index = accountInfo!.ledger!.index;\n\n  return getLedgerAccountPathByIndex(index);\n}\n\nfunction getLedgerAccountPathByIndex(index: number, isTestnet?: boolean, workchain: Workchain = WORKCHAIN) {\n  const network = isTestnet ? 1 : 0;\n  const chain = workchain === -1 ? 255 : 0;\n  return [44, 607, network, chain, index, 0];\n}\n\nfunction getTransferExpirationTime() {\n  return Math.floor(Date.now() / 1000 + TRANSFER_TIMEOUT_SEC);\n}\n\nexport async function getTonAppInfo() {\n  const version = await tonTransport!.getVersion();\n  const isUnsafeSupported = compareVersions(version, VERSION_WITH_UNSAFE) >= 0;\n  const isJettonIdSupported = compareVersions(version, VERSION_WITH_JETTON_ID) >= 0\n    && transport!.deviceModel?.id !== 'nanoS';\n  return { version, isUnsafeSupported, isJettonIdSupported };\n}\n\nfunction handleLedgerErrors(err: any) {\n  if (err?.message.includes('(0xbd00)')) {\n    throw new ApiHardwareBlindSigningNotEnabled();\n  }\n  if (err?.statusCode === StatusCodes.CONDITIONS_OF_USE_NOT_SATISFIED) {\n    throw new ApiUserRejectsError();\n  }\n}\n","import { isAscii } from '../stringFormat';\n\nconst MAX_COMMENT_SIZE = 120;\n\nexport function isValidLedgerComment(comment: string) {\n  return isAscii(comment) && isLedgerCommentLengthValid(comment);\n}\n\nexport function isLedgerCommentLengthValid(comment: string) {\n  return comment.length <= MAX_COMMENT_SIZE;\n}\n","export function isAscii(str: string) {\n  for (let i = 0; i < str.length; i++) {\n    if (str.charCodeAt(i) > 127) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function insertSubstring(str: string, start: number, newSubStr: string) {\n  if (start < 0) {\n    start = str.length - start;\n  }\n  return str.slice(0, start) + newSubStr + str.slice(start);\n}\n"],"names":["bigintRandom","bigintReviver","cloneDeep","value","JSON","parse","stringify","stringifyTxId","_ref","lt","hash","parseTxId","txId","split","Number","buildTokenSlug","minterAddress","addressPart","replace","slice","toLowerCase","generateQueryId","Address","Builder","Cell","axios","WalletContractV1R1","WalletContractV1R2","WalletContractV1R3","WalletContractV2R1","WalletContractV2R2","WalletContractV3R1","WalletContractV3R2","WalletContractV4","WalletContractV5R1","DEFAULT_TIMEOUT","TONHTTPAPI_MAINNET_API_KEY","TONHTTPAPI_MAINNET_URL","TONHTTPAPI_TESTNET_API_KEY","TONHTTPAPI_TESTNET_URL","axiosFetchAdapter","logDebugError","withCacheAsync","DnsItem","JettonMinter","JettonWallet","hexToBytes","getEnvironment","DEFAULT_IS_BOUNCEABLE","DNS_ZONES_MAP","JettonOpCode","LiquidStakingOpCode","OpCode","WORKCHAIN","TonClient","defaults","adapter","TON_MAX_COMMENT_BYTES","clientByNetwork","walletClassMap","simpleR1","simpleR2","simpleR3","v2R1","v2R2","v3R1","v3R2","v4R2","W5","getTonClient","network","arguments","length","undefined","mainnet","endpoint","timeout","apiKey","headers","apiHeaders","testnet","getTonWalletContract","publicKeyHex","version","walletClass","Error","publicKey","Buffer","from","create","workchain","resolveTokenWalletAddress","address","minter","open","walletAddress","getWalletAddress","toBase64Address","resolveTokenMinterAddress","tokenWalletAddress","tokenWallet","data","getWalletData","getWalletPublicKey","res","callGetMethod","bigintKey","stack","readBigNumber","hex","toString","padStart","err","getJettonMinterData","contract","getJettonData","oneCellFromBoc","bytes","fromBoc","isBounceable","urlSafe","bounceable","testOnly","toRawAddress","toRawString","buildTokenTransferBody","params","queryId","tokenAmount","toAddress","responseAddress","forwardAmount","forwardPayload","builder","storeUint","Transfer","storeCoins","storeAddress","storeBit","Uint8Array","freeBytes","Math","round","availableBits","packBytesAsSnake","storeBuffer","storeRef","endCell","parseBase64","base64","fromBase64","commentToBytes","comment","buffer","startBuffer","alloc","writeUInt32BE","Comment","set","maxBytes","packBytesAsSnakeCell","mainBuilder","prevBuilder","currentBuilder","i","byte","entries","_prevBuilder","_prevBuilder2","asCell","createNestedCell","maxCellSize","dataSlice","remainingData","packBytesAsSnakeForEncryptedData","ROOT_BUILDER_BYTES","MAX_CELLS_AMOUNT","rootBuilder","min","buildLiquidStakingDepositBody","Deposit","buildLiquidStakingWithdrawBody","options","amount","waitTillRoundEnd","fillOrKill","customPayload","buildLiquidStakingWithdrawCustomPayload","Burn","getTokenBalance","getJettonBalance","parseAddress","isRaw","parseRaw","isValid","isFriendly","parseFriendly","isUserFriendly","getIsRawAddress","Boolean","getDnsItemDomain","_Object$entries$find","nftData","getNftData","collectionAddress","zone","Object","find","collection","base","getTelemintDomain","getDomain","STAKING_POOLS","sha256","crypto","subtle","digest","bytesToHex","bytesToBase64","base64ToBytes","base64ToString","isKnownStakingPool","some","poolPart","endsWith","ELECTRON_TONHTTPAPI_MAINNET_API_KEY","ELECTRON_TONHTTPAPI_TESTNET_API_KEY","IS_CAPACITOR","IS_EXTENSION","ELECTRON_ORIGIN","environment","setEnvironment","args","_self","isDappSupported","isElectron","isSseSupported","isNativeBottomSheet","self","origin","tonhttpapiMainnetKey","tonhttpapiTestnetKey","compareVersions","versionA","versionB","partsA","map","partsB","max","partA","partB","DEFAULT_ERROR_PAUSE","DEFAULT_RETRIES","ApiServerError","logDebug","pause","MAX_TIMEOUT","fetchJson","url","init","urlObject","URL","forEach","key","Array","isArray","item","searchParams","append","response","fetchWithRetry","json","retries","timeouts","shouldSkipRetryFn","isNotTemporaryError","message","statusCode","_timeouts","fetchWithTimeout","status","error","catch","_err$message","shouldSkipRetry","controller","AbortController","id","setTimeout","abort","fetch","signal","cache","clearTimeout","handleFetchErrors","ignoreHttpCodes","ok","includes","_error","errors","_errors$","msg","StatusCodes","TransportWebHID","TransportWebUSB","loadStateInit","KNOWN_JETTONS","parseMessage","TonTransport","SendMode","ApiLiquidUnstakeMode","ApiTransactionError","BURN_ADDRESS","LIQUID_JETTON","LIQUID_POOL","NOTCOIN_EXCHANGERS","NOTCOIN_VOUCHERS_ADDRESS","ONE_TON","TONCOIN_SLUG","callApi","NFT_TRANSFER_TONCOIN_AMOUNT","NFT_TRANSFER_TONCOIN_FORWARD_AMOUNT","STAKE_COMMENT","TOKEN_TRANSFER_TONCOIN_AMOUNT","TOKEN_TRANSFER_TONCOIN_FORWARD_AMOUNT","TRANSFER_TIMEOUT_SEC","UNSTAKE_COMMENT","WALLET_IS_BOUNCEABLE","ApiHardwareBlindSigningNotEnabled","ApiUnsupportedVersionError","ApiUserRejectsError","handleServerError","parseAccountId","isValidLedgerComment","CHAIN","WALLET_VERSION","INTERNAL_WALLET_VERSION","ATTEMPTS","PAUSE","IS_BOUNCEABLE","VERSION_WITH_UNSAFE","VERSION_WITH_JETTON_ID","VESTING_SUBWALLET_ID","knownJettonAddresses","masterAddress","transport","tonTransport","importLedgerWallet","accountIndex","walletInfo","getLedgerWalletInfo","reconnectLedger","_tonTransport","isAppOpen","connectLedger","waitLedgerTonApp","isSupported","connectHID","connectUSB","waitLedgerTonAppDeadline","Promise","resolve","checkTonApp","isTonOpen","_tonTransport2","getAddress","getLedgerAccountPathByIndex","walletVersion","race","device","list","opened","_await$TransportWebUS","openConnected","request","submitLedgerStake","accountId","type","fee","result","payload","appId","submitLedgerTransfer","password","backendState","poolAddress","nominatorsPool","stakedAt","Date","now","submitLedgerUnstake","state","stakingState","mode","instantAvailable","BestRate","Default","responseDestination","slug","localTransactionParams","tokenAddress","fromAddress","path","appInfo","all","getLedgerAccountPath","getTonAppInfo","seqno","balance","parsedAddress","normalizedAddress","isUnsafeSupported","isJettonIdSupported","buildLedgerTokenTransfer","text","buildCommentPayload","NotSupportedHardwareOperation","isFullTonBalance","sendMode","CARRY_ALL_REMAINING_BALANCE","PAY_GAS_SEPARATELY","IGNORE_ERRORS","signedCell","signTransaction","to","getTransferExpirationTime","bounce","BigInt","toBoc","handleLedgerErrors","submitLedgerNftTransfer","nftAddress","nft","isNotcoinBurn","buildNotcoinVoucherExchange","index","newOwner","nftIndex","first4Bits","readUint8","realTokenAddress","destination","knownJetton","getKnownJettonId","indexOf","jettonId","signLedgerTransactions","messages","isTonConnect","vestingAddress","walletSpecifiers","subwalletId","includeWalletOp","preparedParams","_ledgerPayload","stateInit","stateInitBase64","rawPayload","ledgerPayload","disallowModification","asSlice","signedMessages","attempts","attempt","_message$payload","push","signLedgerProof","proof","timestamp","domain","getAddressProof","signature","getNextLedgerWallets","lastExistingIndex","alreadyImportedAddresses","_deviceModel","_deviceModel2","getLedgerWalletAddress","driver","deviceId","deviceModel","deviceName","productName","isTestnet","chain","verifyAddress","validateAddress","accountInfo","ledger","floor","_deviceModel3","getVersion","CONDITIONS_OF_USE_NOT_SATISFIED","isAscii","MAX_COMMENT_SIZE","isLedgerCommentLengthValid","str","charCodeAt","insertSubstring","start","newSubStr"],"sourceRoot":""}